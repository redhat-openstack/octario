# This file handles everything related to packaging.

# TBD: when ansible 2.1 is min version we should be using
#      https://docs.ansible.com/ansible/yum_repository_module.html
#      https://github.com/ansible/ansible-modules-extras/issues/2384
- name: Disable any repos specified
  become: yes
  shell: yum-config-manager --disable {{ item }}
  args:
    warn: no
  with_items: "{{ component_config.setup.disable_repos | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.disable_repos | default(false)
  tags:
    - skip_ansible_lint

# TBD: when ansible 2.1 is min version we should be using
#      https://docs.ansible.com/ansible/yum_repository_module.html
#      https://github.com/ansible/ansible-modules-extras/issues/2384
- name: Enable any additional repos to be used
  become: yes
  shell: |
    set -euo pipefail
    {% if component.version|int > 14 %}
      dnf config-manager --set-enabled {{ item }} || true
    {% else %}
      yum-config-manager --enable {{ item }} || true
    {% endif %}
  args:
    warn: no
  with_items: "{{ component_config.setup.enable_repos | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.enable_repos | default(false)
  tags:
    - skip_ansible_lint

# (migi) Needed to work-around python-devel dep issue.
- name: RHEL7 - Enable rhelosp-rhel-pending repo
  become: yes
  shell: |
    set -euo pipefail
    yum-config-manager --enable rhelosp-rhel-pending
  when: test_config.virt['RedHat-7'] | default(false)

- name: Print summary of all the repositories enabled on the host
  shell: "{{ yum_bin }} repolist all"
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Enable correct Virt modules for RHEL-8
  become: yes
  shell: |
    set -euo pipefail
    {{ dnf_bin }} -y module disable virt:rhel
    {{ dnf_bin }} -y module enable virt:{{ ansible_distribution_version }} || {{ dnf_bin }} -y module enable virt:av
  when: test_config.virt['RedHat-8'] | default(false)

- name: Install test dependencies RPMs needed to run the tests
  become: yes
  retries: 3
  delay: 10
  yum: pkg="{{ item }}" state=latest
  with_items: "{{ component_config.setup.install | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.install | default(false)
  register: task_result
  until: task_result is success

- name: Remove unwanted rpms
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: pkg="{{ item }}" state=absent
  with_items: "{{ component_config.setup.remove | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.remove | default(false)
  register: task_result
  until: task_result is success

- name: Install pip for override
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: name="{{ pip_package }}" state=present
  when: component_config.setup | default(false) and component_config.setup.pip_override | default(false)
  register: task_result
  until: task_result is success

- name: Install pip3 for override
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: name="{{ pip3_package }}" state=present
  when: component_config.setup | default(false) and component_config.setup.pip3_override | default(false)
  register: task_result
  until: task_result is success

- name: Override packages using pip
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  pip: name="{{ item }}" extra_args="-U --no-deps"
  with_items: "{{ component_config.setup.pip_override | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.pip_override | default(false)
  register: task_result
  until: task_result is success

- name: Override packages using pip3
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  pip: name="{{ item }}" extra_args="-U --no-deps" executable="{{ pip3_executable }}"
  with_items: "{{ component_config.setup.pip3_override | default([]) }}"
  when: component_config.setup | default(false) and component_config.setup.pip3_override | default(false)
  register: task_result
  until: task_result is success

- name: Check if RPM override file exists
  command: "cat {{ ansible_env.HOME }}/{{ component.name }}/override-requirements.txt"
  register: override_stat
  changed_when: False
  failed_when: override_stat.rc not in [0, 1]

- name: Install override packages
  become: yes
  vars:
      override_reqs: "{{ ansible_env.HOME }}/{{ component.name }}/override-requirements.txt"
  yum:
    state: present
    name: "{{ item }}"
  with_items: "{{ override_stat.stdout_lines }}"
  when: override_stat.rc == 0

- name: Install packages needed for converting and collecting the logs
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: name="{{ logs_packages }}" state=present
  when: "convert_fetch_logs | default(False) and test_config.virt['RedHat-7'] | default(false)"
  register: task_result
  until: task_result is success

- name: Install certificates on RedHat-7
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: name="{{ cert_packages }}" state=present
  when: "test_config.virt['RedHat-7'] | default(false)"
  register: task_result
  until: task_result is success

- name: Install packages needed for converting and collecting the logs - python3
  become: yes
  retries: 3
  delay: 10
  become_method: sudo
  yum: name="{{ logs_packages_python3 }}" state=present
  when: "convert_fetch_logs | default(False) and test_config.virt['RedHat-8'] | default(false)"
  register: task_result
  until: task_result is success
